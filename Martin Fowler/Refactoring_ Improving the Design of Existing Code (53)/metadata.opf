<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id" version="2.0">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">53</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">91563579-2651-40ef-b8ac-4564175fc607</dc:identifier>
        <dc:title>Refactoring: Improving the Design of Existing Code</dc:title>
        <dc:creator opf:file-as="Fowler, Martin &amp; Beck, Kent &amp; Brant, John &amp; Opdyke, William &amp; Roberts, Don" opf:role="aut">Martin Fowler</dc:creator>
        <dc:creator opf:file-as="Fowler, Martin &amp; Beck, Kent &amp; Brant, John &amp; Opdyke, William &amp; Roberts, Don" opf:role="aut">Kent Beck</dc:creator>
        <dc:creator opf:file-as="Fowler, Martin &amp; Beck, Kent &amp; Brant, John &amp; Opdyke, William &amp; Roberts, Don" opf:role="aut">John Brant</dc:creator>
        <dc:creator opf:file-as="Fowler, Martin &amp; Beck, Kent &amp; Brant, John &amp; Opdyke, William &amp; Roberts, Don" opf:role="aut">William Opdyke</dc:creator>
        <dc:creator opf:file-as="Fowler, Martin &amp; Beck, Kent &amp; Brant, John &amp; Opdyke, William &amp; Roberts, Don" opf:role="aut">Don Roberts</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (6.24.0) [https://calibre-ebook.com]</dc:contributor>
        <dc:date>2012-03-09T10:55:25+00:00</dc:date>
        <dc:description>&lt;p&gt;As the application of object technology--particularly the Java programming language--has become commonplace, a new problem has emerged to confront the software development community. Significant numbers of poorly designed programs have been created by less-experienced developers, resulting in applications that are inefficient and hard to maintain and extend. Increasingly, software system professionals are discovering just how difficult it is to work with these inherited, "non-optimal" applications. For several years, expert-level object programmers have employed a growing collection of techniques to improve the structural integrity and performance of such existing software programs. Referred to as "refactoring," these practices have remained in the domain of experts because no attempt has been made to transcribe the lore into a form that all developers could use. . .until now. In  Refactoring: Improving the Design of Existing Code,  renowned object technology mentor Martin Fowler breaks new ground, demystifying these master practices and demonstrating how software practitioners can realize the significant benefits of this new process.    With proper training a skilled system designer can take a bad design and rework it into well-designed, robust code. In this book, Martin Fowler shows you where opportunities for refactoring typically can be found, and how to go about reworking a bad design into a good one. Each refactoring step is simple--seemingly too simple to be worth doing. Refactoring may involve moving a field from one class to another, or pulling some code out of a method to turn it into its own method, or even pushing some code up or down a hierarchy. While these individual steps may seem elementary, the cumulative effect of such small changes can radically improve the design. Refactoring is a proven way to prevent software decay.    In addition to discussing the various techniques of refactoring, the author provides a detailed catalog of more than seventy proven refactorings with helpful pointers that teach you when to apply them; step-by-step instructions for applying each refactoring; and an example illustrating how the refactoring works. The illustrative examples are written in Java, but the ideas are applicable to any object-oriented programming language.&lt;/p&gt;</dc:description>
        <dc:publisher>Addison-Wesley</dc:publisher>
        <dc:identifier opf:scheme="GOOGLE">HmrDHwgkbPsC</dc:identifier>
        <dc:identifier opf:scheme="ISBN">9780133065268</dc:identifier>
        <dc:language>eng</dc:language>
        <dc:subject>development</dc:subject>
        <dc:subject>Object Oriented</dc:subject>
        <dc:subject>programming</dc:subject>
        <dc:subject>Computers</dc:subject>
        <meta name="calibre:timestamp" content="2022-10-06T14:26:18+00:00"/>
        <meta name="calibre:title_sort" content="Refactoring: Improving the Design of Existing Code, Second Edition (Garner McCloud's Library)"/>
        <meta name="calibre:user_metadata:#lastopened" content="{&quot;table&quot;: &quot;custom_column_1&quot;, &quot;column&quot;: &quot;value&quot;, &quot;datatype&quot;: &quot;datetime&quot;, &quot;is_multiple&quot;: null, &quot;kind&quot;: &quot;field&quot;, &quot;name&quot;: &quot;lastopened&quot;, &quot;search_terms&quot;: [&quot;#lastopened&quot;], &quot;label&quot;: &quot;lastopened&quot;, &quot;colnum&quot;: 1, &quot;display&quot;: {&quot;date_format&quot;: null, &quot;description&quot;: &quot;&quot;}, &quot;is_custom&quot;: true, &quot;is_category&quot;: false, &quot;link_column&quot;: &quot;value&quot;, &quot;category_sort&quot;: &quot;value&quot;, &quot;is_csp&quot;: false, &quot;is_editable&quot;: true, &quot;rec_index&quot;: 22, &quot;#value#&quot;: null, &quot;#extra#&quot;: null, &quot;is_multiple2&quot;: {}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;EPUB&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/2/548[ch08lev1sec8]/2[page_231]:26&quot;, &quot;highlighted_text&quot;: &quot;Replace Loop with Pipeline&quot;, &quot;notes&quot;: &quot;this was  covered in the Pragmatic Programmer book as well.\nTopic 30, Transforming Programming&quot;, &quot;spine_index&quot;: 16, &quot;spine_name&quot;: &quot;OEBPS/xhtml/ch08.xhtml&quot;, &quot;start_cfi&quot;: &quot;/2/4/2/548[ch08lev1sec8]/2[page_231]:0&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;green&quot;}, &quot;timestamp&quot;: &quot;2022-10-06T14:53:32.339Z&quot;, &quot;toc_family_titles&quot;: [&quot;Chapter 8 Moving Features&quot;, &quot;Replace Loop with Pipeline&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;76FbbQwqGOsl1-igjjePKw&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;EPUB&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/2/322/1:90&quot;, &quot;highlighted_text&quot;: &quot;coupling&quot;, &quot;spine_index&quot;: 14, &quot;spine_name&quot;: &quot;OEBPS/xhtml/ch06.xhtml&quot;, &quot;start_cfi&quot;: &quot;/2/4/2/322/1:82&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;red&quot;}, &quot;timestamp&quot;: &quot;2022-10-06T15:12:54.959Z&quot;, &quot;toc_family_titles&quot;: [&quot;Chapter 6 A First Set of Refactorings&quot;, &quot;Change Function Declaration&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;GwJhEPRkyvn-qFfGADVK0A&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;EPUB&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/2/560/1:519&quot;, &quot;highlighted_text&quot;: &quot;but conditional logic like this tends to decay as further modifications are made unless itâ€™s reinforced by more structural elements of the programming language.&quot;, &quot;notes&quot;: &quot;conditional logic decay.&quot;, &quot;spine_index&quot;: 9, &quot;spine_name&quot;: &quot;OEBPS/xhtml/ch01.xhtml&quot;, &quot;start_cfi&quot;: &quot;/2/4/2/560/1:359&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;red&quot;}, &quot;timestamp&quot;: &quot;2022-10-06T15:08:05.141Z&quot;, &quot;toc_family_titles&quot;: [&quot;Chapter 1 Refactoring: A First Example&quot;, &quot;Reorganizing the Calculations by Type&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;XolIDFpsJ-ge8ok3rB_uDQ&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;EPUB&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/2/554/2/6/1:103&quot;, &quot;highlighted_text&quot;: &quot; When programming, follow the camping rule: Always leave the code base healthier than when you found it.&quot;, &quot;notes&quot;: &quot;Also found in Clean Code by Bob Marting&quot;, &quot;spine_index&quot;: 9, &quot;spine_name&quot;: &quot;OEBPS/xhtml/ch01.xhtml&quot;, &quot;start_cfi&quot;: &quot;/2/4/2/554/2/2&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;green&quot;}, &quot;timestamp&quot;: &quot;2022-10-06T15:06:37.946Z&quot;, &quot;toc_family_titles&quot;: [&quot;Chapter 1 Refactoring: A First Example&quot;, &quot;Status: Separated into Two Files (and Phases)&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;hNBxA6c4279yiT3yGm45QA&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;EPUB&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/2/282/1:369&quot;, &quot;highlighted_text&quot;: &quot;In this situation, however, I like to keep the unnecessary superclass as it helps explain the way the classes are related in the domain.&quot;, &quot;spine_index&quot;: 18, &quot;spine_name&quot;: &quot;OEBPS/xhtml/ch10.xhtml&quot;, &quot;start_cfi&quot;: &quot;/2/4/2/282/1:233&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;green&quot;}, &quot;timestamp&quot;: &quot;2022-10-06T16:31:48.527Z&quot;, &quot;toc_family_titles&quot;: [&quot;Chapter 10 Simplifying Conditional Logic&quot;, &quot;Replace Conditional with Polymorphism&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;wnQ0RXqyT0YI6LbWIdNtbg&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;EPUB&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/2/238/1:188&quot;, &quot;highlighted_text&quot;: &quot;  function createBird(bird) {\n    switch (bird.type) {\n    case 'EuropeanSwallow':\n      return new EuropeanSwallow(bird);\n    case 'AfricanSwallow':\n      return new AfricanSwallow(bird);\n    case 'NorweigianBlueParrot':\n      return new NorwegianBlueParrot(bird);\n    default:\n      return new Bird(bird);\n    }\n  }&quot;, &quot;spine_index&quot;: 18, &quot;spine_name&quot;: &quot;OEBPS/xhtml/ch10.xhtml&quot;, &quot;start_cfi&quot;: &quot;/2/4/2/238/1:124&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;red&quot;}, &quot;timestamp&quot;: &quot;2022-10-06T16:27:58.200Z&quot;, &quot;toc_family_titles&quot;: [&quot;Chapter 10 Simplifying Conditional Logic&quot;, &quot;Replace Conditional with Polymorphism&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;yaz8kP1WuhxMxtU1I-27lQ&quot;}}"/>
    </metadata>
    <guide>
        <reference type="cover" title="Cover" href="cover.jpg"/>
    </guide>
</package>
