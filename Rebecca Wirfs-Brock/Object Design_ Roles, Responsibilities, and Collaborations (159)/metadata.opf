<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id" version="2.0">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">159</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">c9c49117-a188-4b03-a5fd-66c6395bc67a</dc:identifier>
        <dc:title>Object Design: Roles, Responsibilities, and Collaborations</dc:title>
        <dc:creator opf:file-as="Wirfs-Brock, Rebecca" opf:role="aut">Rebecca Wirfs-Brock</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (7.14.0) [https://calibre-ebook.com]</dc:contributor>
        <dc:date>2002-01-02T00:00:00+00:00</dc:date>
        <dc:description>&lt;p&gt;After more than ten years, object technology pioneer Rebecca Wirfs-Brock teams with expert Alan McKean to present a thoroughly updated, modern, and proven method for the design of software. The book is packed with practical design techniques that enable the practitioner to get the job done. Like many human endeavors, design is part art, part engineering, part guesswork, and part experimentation. Discipline, hard work, inspiration, and sound technique all play their part as well. For any given problem, there are many reasonable, but only a few very good solutions. The authors' goal is to help readers learn to make those very good design decisions on their own. The book explores challenges that software developers will face as they build their design, and shows how design patterns can be used to solve design problems. Long awaited and eagerly anticipated, this book represents the first great software design book of the century. A FUTURE CLASSIC!&lt;/p&gt;&lt;h3&gt;From the Back Cover&lt;/h3&gt;
&lt;p&gt;If you create software using object-oriented languages and tools, then Responsibility-Driven Design has likely influenced your work. For over ten years Responsibility-Driven Design methodology has been the standard bearer of the behavioral approach to designing object-oriented software. Object Design: Roles, Responsibilities, and Collaborations focuses on the practice of designing objects as integral members of a community where each object has specific roles and responsibilities. The authors present the latest practices and techniques of Responsibility-Driven Design and show how you can apply them as you develop modern object-based applications.&lt;/p&gt;
&lt;p&gt;Working within this conceptual framework, Rebecca Wirfs-Brock and Alan McKean present how user requirements, system architecture, and design patterns all contribute to the design of an effective object model. They introduce a rich vocabulary that designers can use to discuss aspects of their designs, discuss design trade-offs, and offer practical guidelines for enhancing the reliability and flexibility of applications. In addition, case studies and real-world examples demonstrate how the principles and techniques of Responsibility-Driven Design apply to real-world software designs.&lt;/p&gt;
&lt;p&gt;You'll find coverage of such topics as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strategies for selecting and rejecting candidate objects in an emerging design model&lt;/li&gt;
&lt;li&gt;Object role stereotypes and how to identify objects' behaviors&lt;/li&gt;
&lt;li&gt;How to characterize objects using role stereotypes&lt;/li&gt;
&lt;li&gt;Allocating responsibilities to appropriate objects&lt;/li&gt;
&lt;li&gt;Developing a collaboration model&lt;/li&gt;
&lt;li&gt;Strategies for designing application control centers&lt;/li&gt;
&lt;li&gt;Documenting and describing a design, focusing on use cases, design conversations, and annotations&lt;/li&gt;
&lt;li&gt;Strategies for enhancing reliability, including handling exceptions and recovering from errors&lt;/li&gt;
&lt;li&gt;How to characterize software variations and design to support them for greater flexibility&lt;/li&gt;
&lt;li&gt;How to categorize and treat various kinds of design problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As all experienced designers know, software design is part art and inspiration and part consistent effort and solid technique. Object Design: Roles, Responsibilities, and Collaborations will help all software designers--from students to seasoned professionals--develop both the concrete reasoning skills and the design expertise necessary to produce responsible software designs.&lt;/p&gt;
&lt;p&gt;0201379430B08292002&lt;/p&gt;
&lt;h3&gt;About the Author&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Rebecca Wirfs-Brock&lt;/strong&gt; is founder of Wirfs-Brock Associates. She consults with clients on actual architecture and design projects as well as development practices and methods. She is the originator of the set of development practices known as Responsibility-Driven Design. Among her widely used inventions are use case conversations and object role stereotypes. She was lead author of the classic work &lt;em&gt;Designing Object-Oriented Software&lt;/em&gt; (Prentice-Hall, 1990). &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alan McKean&lt;/strong&gt; is a respected object technology educator and cofounder of Wirfs-Brock Associates. His classes have introduced thousands of developers to object-oriented design and programming and his instructional techniques have been widely adopted by other educators. An experienced programmer, speaker, and instructor, Alan has developed curricula in object-oriented design, programming, and distributed object systems. &lt;/p&gt;
&lt;p&gt;0201379430AB08292002&lt;/p&gt;
&lt;h3&gt;Excerpt. Â© Reprinted by permission. All rights reserved.&lt;/h3&gt;
&lt;p&gt;This book is about designing object software. Like many human endeavors, design is part art, part engineering, and part guesswork and experimentation. Discipline, hard work, inspiration, and sound technique all play their parts. Although software design is a highly creative activity, the fundamentals can be easily learned. Strategies and techniques exist for developing a design solution, and this book is packed with practical design techniques that help you get the job done. We hope you will become adept at thinking in objects and excited about devising solutions that exploit object technology. &lt;/p&gt;
&lt;p&gt;You can consider design choices only in light of what you know to be relevant and important. To achieve good results, you need to learn how to discriminate important choices from mundane ones and how to acquire a good set of techniques that you intelligently practice. The informal tools and techniques in this book that don't require much more than a white board, a stack of index cards, a big sheet of paper, and chairs around a table. Oh yeah, be sure to bring your brain, too! &lt;/p&gt;
&lt;p&gt;But more important than a grab bag of techniques are the fundamental ways you view a design. Although the techniques we present in this book are independent of any particular implementation technology or modeling language or design method, our approach to object design requires a specific perspective: Objects are not just simple bundles of logic and data. They are responsible members of an object community. This approach, called Responsibility-Driven Design, gives you the basis for reasoning about objects. &lt;/p&gt;
&lt;p&gt;Most novice designers are searching for the right set of techniques to rigidly follow in order to produce the correct design. In practice, things are never that straightforward. For any given problem there are many reasonable solutions, and a few very good solutions. People don't produce identical designs even if they follow similar practices or apply identical design heuristics. For each problem you approach, you make a different set of tactical decisions. The effects of each small decision accumulate. Your current design as well as your current lines of reasoning shape and limit subsequent possibilities. Given the potential impact of seemingly inconsequential decisions, designers need to thoughtfully exercise good judgment. &lt;/p&gt;
&lt;p&gt;Your primary tool as a designer is your power of abstraction--forming objects that represent the essence of a working application. In a design, objects play specific roles and occupy well-known positions in an application's architecture. Each object is accountable for a specific portion of the work. Each has specific responsibilities. Objects collaborate in clearly defined ways, contracting with each other to fulfill the larger goals of the application. &lt;/p&gt;
&lt;p&gt;Design is both a collaborative and a solo effort. To work effectively you need not only a rich vocabulary for describing your design but also strategies for finding objects, recipes for developing a collaborative model, and a framework for discussing design trade-offs. You will find these tools in this book. We also explore how design patterns can be used to solve a particular design problem and demonstrate their effects on a design. We present you with strategies for increasing your software's reliability and flexibility. We discuss different types of design problems and effective ways to approach them. This book presents many tools and techniques for reasoning about a design's qualities and effectively communicating design ideas. Whether you're a student or a seasoned programmer, a senior developer or a newcomer to objects, you can take away many practical things from this book. How to Read This Book &lt;/p&gt;
&lt;p&gt;This book is organized into two major parts. The first six chapters--Chapter 1, Design Concepts, Chapter 2, Responsibility-Driven Design, Chapter 3, Finding Objects, Chapter 4, Responsibilities, Chapter 5, Collaborations, and Chapter 6, Control Style--form the core of Responsibility-Driven Design principles and techniques. You should get a good grounding by reading these chapters. &lt;/p&gt;
&lt;p&gt;Chapter 1, Design Concepts, introduces fundamental views of object technology and explains how each element contributes to a coherent way of designing an application. Even if you are a veteran designer, a quick read will set the stage for thinking about object design in terms of objects' roles and responsibilities. Chapter 2, Responsibility-Driven Design, provides a brief tour of Responsibility-Driven Design in practice. Chapter 3, Finding Objects, presents strategies for selecting and, equally important, rejecting candidate objects in an emerging design model. Chapter 4, Responsibilities presents many techniques for defining responsibilities and intelligently allocating them to objects. Chapter 5, Collaborations, gives many practical tips and examples of how to develop a collaboration model. Chapter 6, Control Style, describes strategies for developing your application's control centers and options for allocating decision-making and control responsibilities. &lt;/p&gt;
&lt;p&gt;Chapters 7-10 explore challenges you may encounter as you develop your design. Each chapter covers a specific topic that builds on the design concepts and techniques presented in the first part of the book. Chapter 7, Describing Collaborations, explores options for documenting and describing your design. Chapter 8, Reliable Collaborations, presents strategies for handling exceptions, recovering from errors, and collaborating within and across a "trusted region." Chapter 9, Flexibility, discusses how to characterize software variations and design to support them. Chapter 10, On Design, discusses how to sort design problems into one of three buckets--the core, the revealing, and the rest--and treat each accordingly.   &lt;/p&gt;
&lt;p&gt;0201379430P10212002   &lt;/p&gt;
&lt;h3&gt;Excerpt. Â© Reprinted by permission. All rights reserved.&lt;/h3&gt;
&lt;p&gt;This book is about designing object software. Like many human endeavors, design is part art, part engineering, and part guesswork and experimentation. Discipline, hard work, inspiration, and sound technique all play their parts. Although software design is a highly creative activity, the fundamentals can be easily learned. Strategies and techniques exist for developing a design solution, and this book is packed with practical design techniques that help you get the job done. We hope you will become adept at thinking in objects and excited about devising solutions that exploit object technology.&lt;/p&gt;
&lt;p&gt;You can consider design choices only in light of what you know to be relevant and important. To achieve good results, you need to learn how to discriminate important choices from mundane ones and how to acquire a good set of techniques that you intelligently practice. The informal tools and techniques in this book that don't require much more than a white board, a stack of index cards, a big sheet of paper, and chairs around a table. Oh yeah, be sure to bring your brain, too!&lt;/p&gt;
&lt;p&gt;But more important than a grab bag of techniques are the fundamental ways you view a design. Although the techniques we present in this book are independent of any particular implementation technology or modeling language or design method, our approach to object design requires a specific perspective: Objects are not just simple bundles of logic and data. They are responsible members of an object community. This approach, called Responsibility-Driven Design, gives you the basis for reasoning about objects.&lt;/p&gt;
&lt;p&gt;Most novice designers are searching for the right set of techniques to rigidly follow in order to produce the correct design. In practice, things are never that straightforward. For any given problem there are many reasonable solutions, and a few very good solutions. People don't produce identical designs even if they follow similar practices or apply identical design heuristics. For each problem you approach, you make a different set of tactical decisions. The effects of each small decision accumulate. Your current design as well as your current lines of reasoning shape and limit subsequent possibilities. Given the potential impact of seemingly inconsequential decisions, designers need to thoughtfully exercise good judgment.&lt;/p&gt;
&lt;p&gt;Your primary tool as a designer is your power of abstraction--forming objects that represent the essence of a working application. In a design, objects play specific roles and occupy well-known positions in an application's architecture. Each object is accountable for a specific portion of the work. Each has specific responsibilities. Objects collaborate in clearly defined ways, contracting with each other to fulfill the larger goals of the application.&lt;/p&gt;
&lt;p&gt;Design is both a collaborative and a solo effort. To work effectively you need not only a rich vocabulary for describing your design but also strategies for finding objects, recipes for developing a collaborative model, and a framework for discussing design trade-offs. You will find these tools in this book. We also explore how design patterns can be used to solve a particular design problem and demonstrate their effects on a design. We present you with strategies for increasing your software's reliability and flexibility. We discuss different types of design problems and effective ways to approach them. This book presents many tools and techniques for reasoning about a design's qualities and effectively communicating design ideas. Whether you're a student or a seasoned programmer, a senior developer or a newcomer to objects, you can take away many practical things from this book.&lt;/p&gt;
&lt;h3&gt;How to Read This Book&lt;/h3&gt;
&lt;p&gt;This book is organized into two major parts. The first six chapters--Chapter 1, Design Concepts, Chapter 2, Responsibility-Driven Design, Chapter 3, Finding Objects, Chapter 4, Responsibilities, Chapter 5, Collaborations, and Chapter 6, Control Style--form the core of Responsibility-Driven Design principles and techniques. You should get a good grounding by reading these chapters.&lt;/p&gt;
&lt;p&gt;Chapter 1, Design Concepts, introduces fundamental views of object technology and explains how each element contributes to a coherent way of designing an application. Even if you are a veteran designer, a quick read will set the stage for thinking about object design in terms of objects' roles and responsibilities. Chapter 2, Responsibility-Driven Design, provides a brief tour of Responsibility-Driven Design in practice. Chapter 3, Finding Objects, presents strategies for selecting and, equally important, rejecting candidate objects in an emerging design model. Chapter 4, Responsibilities presents many techniques for defining responsibilities and intelligently allocating them to objects. Chapter 5, Collaborations, gives many practical tips and examples of how to develop a collaboration model. Chapter 6, Control Style, describes strategies for developing your application's control centers and options for allocating decision-making and control responsibilities.&lt;/p&gt;
&lt;p&gt;Chapters 7-10 explore challenges you may encounter as you develop your design. Each chapter covers a specific topic that builds on the design concepts and techniques presented in the first part of the book. Chapter 7, Describing Collaborations, explores options for documenting and describing your design. Chapter 8, Reliable Collaborations, presents strategies for handling exceptions, recovering from errors, and collaborating within and across a "trusted region." Chapter 9, Flexibility, discusses how to characterize software variations and design to support them. Chapter 10, On Design, discusses how to sort design problems into one of three buckets--the core, the revealing, and the rest--and treat each accordingly.&lt;/p&gt;
&lt;p&gt;0201379430P10212002 &lt;/p&gt;</dc:description>
        <dc:publisher>Addison-Wesley Professional</dc:publisher>
        <dc:identifier opf:scheme="AMAZON">0201379430</dc:identifier>
        <dc:identifier opf:scheme="ISBN">9780201379433</dc:identifier>
        <dc:identifier opf:scheme="GOOGLE">-Y7jtwEACAAJ</dc:identifier>
        <dc:language>eng</dc:language>
        <meta name="calibre:rating" content="8"/>
        <meta name="calibre:timestamp" content="2024-08-28T15:14:00.552959+00:00"/>
        <meta name="calibre:title_sort" content="Object Design: Roles, Responsibilities, and Collaborations"/>
        <meta name="calibre:user_metadata:#lastopened" content="{&quot;table&quot;: &quot;custom_column_1&quot;, &quot;column&quot;: &quot;value&quot;, &quot;datatype&quot;: &quot;datetime&quot;, &quot;is_multiple&quot;: null, &quot;kind&quot;: &quot;field&quot;, &quot;name&quot;: &quot;lastopened&quot;, &quot;search_terms&quot;: [&quot;#lastopened&quot;], &quot;label&quot;: &quot;lastopened&quot;, &quot;colnum&quot;: 1, &quot;display&quot;: {&quot;date_format&quot;: null, &quot;description&quot;: &quot;&quot;}, &quot;is_custom&quot;: true, &quot;is_category&quot;: false, &quot;link_column&quot;: &quot;value&quot;, &quot;category_sort&quot;: &quot;value&quot;, &quot;is_csp&quot;: false, &quot;is_editable&quot;: true, &quot;rec_index&quot;: 22, &quot;#value#&quot;: {&quot;__class__&quot;: &quot;datetime.datetime&quot;, &quot;__value__&quot;: &quot;2024-08-28T15:16:05.439492+00:00&quot;}, &quot;#extra#&quot;: null, &quot;is_multiple2&quot;: {}}"/>
    </metadata>
    <guide>
        <reference type="cover" title="Cover" href="cover.jpg"/>
    </guide>
</package>
