<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id" version="2.0">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">55</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">08570eb5-83ed-4a3e-82e5-6d6e5312ebae</dc:identifier>
        <dc:title>Domain-Driven Design: Tackling Complexity in the Heart of Software</dc:title>
        <dc:creator opf:file-as="Eric, Evans" opf:role="aut">Evans Eric</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (6.14.0) [https://calibre-ebook.com]</dc:contributor>
        <dc:date>2004-10-14T22:00:00+00:00</dc:date>
        <dc:description>&lt;h3&gt;From the Back Cover&lt;/h3&gt;
&lt;p&gt;“Eric Evans has written a fantastic book on how you can make the design of your software match your mental model of the problem domain you are addressing. &lt;/p&gt;
&lt;p&gt;“His book is very compatible with XP. It is not about drawing pictures of a domain; it is about how you think of it, the language you use to talk about it, and how you organize your software to reflect your improving understanding of it. Eric thinks that learning about your problem domain is as likely to happen at the end of your project as at the beginning, and so refactoring is a big part of his technique. &lt;/p&gt;
&lt;p&gt;“The book is a fun read. Eric has lots of interesting stories, and he has a way with words. I see this book as essential reading for software developers―it is a future classic.” &lt;/p&gt;
&lt;p&gt;― &lt;strong&gt;Ralph Johnson&lt;/strong&gt; , author of &lt;em&gt;Design Patterns&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;“If you don’t think you are getting value from your investment in object-oriented programming, this book will tell you what you’ve forgotten to do.&lt;/p&gt;
&lt;p&gt;“Eric Evans convincingly argues for the importance of domain modeling as the central focus of development and provides a solid framework and set of techniques for accomplishing it. This is timeless wisdom, and will hold up long after the methodologies du jour have gone out of fashion.” &lt;/p&gt;
&lt;p&gt;― &lt;strong&gt;Dave Collins&lt;/strong&gt; , author of &lt;em&gt;Designing Object-Oriented User Interfaces&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;“Eric weaves real-world experience modeling―and building―business applications into a practical, useful book. Written from the perspective of a trusted practitioner, Eric’s descriptions of ubiquitous language, the benefits of sharing models with users, object life-cycle management, logical and physical application structuring, and the process and results of deep refactoring are major contributions to our field.” &lt;/p&gt;
&lt;p&gt;― &lt;strong&gt;Luke Hohmann&lt;/strong&gt; , author of &lt;em&gt;Beyond Software Architecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"This book belongs on the shelf of every thoughtful software developer."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;--Kent Beck&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"What Eric has managed to capture is a part of the design process that experienced object designers have always used, but that we have been singularly unsuccessful as a group in conveying to the rest of the industry. We've given away bits and pieces of this knowledge...but we've never organized and systematized the principles of building domain logic. This book is important."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;--Kyle Brown, author of &lt;em&gt;Enterprise Java™ Programming with IBM&lt;/em&gt; &lt;em&gt;®&lt;/em&gt; &lt;em&gt;WebSphere&lt;/em&gt; &lt;em&gt;®&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The software development community widely acknowledges that domain modeling is central to software design. Through domain models, software developers are able to express rich functionality and translate it into a software implementation that truly serves the needs of its users. But despite its obvious importance, there are few practical resources that explain how to incorporate effective domain modeling into the software development process.&lt;/p&gt;
&lt;p&gt;Domain-Driven Design fills that need. This is not a book about specific technologies. It offers readers a systematic approach to domain-driven design, presenting an extensive set of design best practices, experience-based techniques, and fundamental principles that facilitate the development of software projects facing complex domains. Intertwining design and development practice, this book incorporates numerous examples based on actual projects to illustrate the application of domain-driven design to real-world software development.&lt;/p&gt;
&lt;p&gt;Readers learn how to use a domain model to make a complex development effort more focused and dynamic. A core of best practices and standard patterns provides a common language for the development team. A shift in emphasis--refactoring not just the code but the model underlying the code--in combination with the frequent iterations of Agile development leads to deeper insight into domains and enhanced communication between domain expert and programmer. Domain-Driven Design then builds on this foundation, and addresses modeling and design for complex systems and larger organizations.Specific topics covered include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting all team members to speak the same language&lt;/li&gt;
&lt;li&gt;Connecting model and implementation more deeply&lt;/li&gt;
&lt;li&gt;Sharpening key distinctions in a model&lt;/li&gt;
&lt;li&gt;Managing the lifecycle of a domain object &lt;/li&gt;
&lt;li&gt;Writing domain code that is safe to combine in elaborate ways&lt;/li&gt;
&lt;li&gt;Making complex code obvious and predictable&lt;/li&gt;
&lt;li&gt;Formulating a domain vision statement &lt;/li&gt;
&lt;li&gt;Distilling the core of a complex domain&lt;/li&gt;
&lt;li&gt;Digging out implicit concepts needed in the model &lt;/li&gt;
&lt;li&gt;Applying analysis patterns &lt;/li&gt;
&lt;li&gt;Relating design patterns to the model &lt;/li&gt;
&lt;li&gt;Maintaining model integrity in a large system&lt;/li&gt;
&lt;li&gt;Dealing with coexisting models on the same project&lt;/li&gt;
&lt;li&gt;Organizing systems with large-scale structures&lt;/li&gt;
&lt;li&gt;Recognizing and responding to modeling breakthroughs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this book in hand, object-oriented developers, system analysts, and designers will have the guidance they need to organize and focus their work, create rich and useful domain models, and leverage those models into quality, long-lasting software implementations.&lt;/p&gt;
&lt;h3&gt;Product Description&lt;/h3&gt;
&lt;p&gt;Domain-Driven Design fills that need. This is not a book about specific technologies. It offers readers a systematic approach to domain-driven design, presenting an extensive set of design best practices, experience-based techniques, and fundamental principles that facilitate the development of software projects facing complex domains. Intertwining design and development practice, this book incorporates numerous examples based on actual projects to illustrate the application of domain-driven design to real-world software development.&lt;/p&gt;
&lt;p&gt;Readers learn how to use a domain model to make a complex development effort more focused and dynamic. A core of best practices and standard patterns provides a common language for the development team. A shift in emphasis–refactoring not just the code but the model underlying the code–in combination with the frequent iterations of Agile development leads to deeper insight into domains and enhanced communication between domain expert and programmer. Domain-Driven Design then builds on this foundation, and addresses modeling and design for complex systems and larger organizations.Specific topics covered include:&lt;/p&gt;
&lt;p&gt;With this book in hand, object-oriented developers, system analysts, and designers will have the guidance they need to organize and focus their work, create rich and useful domain models, and leverage those models into quality, long-lasting software implementations.&lt;/p&gt;
&lt;h3&gt;About the Author&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Eric Evans&lt;/strong&gt; is the founder of Domain Language, a consulting group dedicated to helping companies build evolving software deeply connected to their businesses. Since the 1980s, Eric has worked as a designer and programmer on large object-oriented systems in several complex business and technical domains. He has also trained and coached development teams in Extreme Programming. &lt;/p&gt;</dc:description>
        <dc:publisher>Pearson Education Limited (US titles)</dc:publisher>
        <dc:identifier opf:scheme="ISBN">9780132181273</dc:identifier>
        <dc:identifier opf:scheme="AMAZON">B00794TAUG</dc:identifier>
        <dc:language>eng</dc:language>
        <meta name="calibre:author_link_map" content="{&quot;Evans Eric&quot;: &quot;&quot;}"/>
        <meta name="calibre:timestamp" content="2022-10-06T14:28:12+00:00"/>
        <meta name="calibre:title_sort" content="Domain-Driven Design: Tackling Complexity in the Heart of Software"/>
        <meta name="calibre:user_metadata:#lastopened" content="{&quot;table&quot;: &quot;custom_column_1&quot;, &quot;column&quot;: &quot;value&quot;, &quot;datatype&quot;: &quot;datetime&quot;, &quot;is_multiple&quot;: null, &quot;kind&quot;: &quot;field&quot;, &quot;name&quot;: &quot;lastopened&quot;, &quot;search_terms&quot;: [&quot;#lastopened&quot;], &quot;label&quot;: &quot;lastopened&quot;, &quot;colnum&quot;: 1, &quot;display&quot;: {&quot;date_format&quot;: null, &quot;description&quot;: &quot;&quot;}, &quot;is_custom&quot;: true, &quot;is_category&quot;: false, &quot;link_column&quot;: &quot;value&quot;, &quot;category_sort&quot;: &quot;value&quot;, &quot;is_csp&quot;: false, &quot;is_editable&quot;: true, &quot;rec_index&quot;: 22, &quot;#value#&quot;: null, &quot;#extra#&quot;: null, &quot;is_multiple2&quot;: {}}"/>
    </metadata>
    <guide>
        <reference type="cover" title="Cover" href="cover.jpg"/>
    </guide>
</package>
